// Theme Toggle
document.addEventListener('DOMContentLoaded', () => {
    const themeToggle = document.getElementById('themeToggle');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    if (prefersDark) {
        document.documentElement.setAttribute('data-theme', 'dark');
        themeToggle.textContent = '‚òÄÔ∏è';
    }

    themeToggle.addEventListener('click', () => {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        if (currentTheme === 'dark') {
            document.documentElement.removeAttribute('data-theme');
            themeToggle.textContent = 'üåô';
        } else {
            document.documentElement.setAttribute('data-theme', 'dark');
            themeToggle.textContent = '‚òÄÔ∏è';
        }
    });
});

// Unit Circle Visualization
class UnitCircle {
    constructor() {
        this.canvas = document.getElementById('unitCircle');
        this.ctx = this.canvas.getContext('2d');
        this.currentAngle = 0;
        this.isPlaying = false;
        this.animationId = null;
        this.setupCanvas();
        this.setupControls();
        this.draw();
    }

    setupCanvas() {
        const resize = () => {
            const container = this.canvas.parentElement;
            const size = container.offsetWidth;
            this.canvas.width = size;
            this.canvas.height = size;
            this.draw();
        };

        window.addEventListener('resize', resize);
        resize();
    }

    setupControls() {
        document.getElementById('decreaseAngle').addEventListener('click', () => {
            this.currentAngle = (this.currentAngle - 5) % 360;
            this.updateAngleDisplay();
            this.draw();
        });

        document.getElementById('increaseAngle').addEventListener('click', () => {
            this.currentAngle = (this.currentAngle + 5) % 360;
            this.updateAngleDisplay();
            this.draw();
        });

        const playPauseBtn = document.getElementById('playPause');
        playPauseBtn.addEventListener('click', () => {
            this.isPlaying = !this.isPlaying;
            playPauseBtn.textContent = this.isPlaying ? '‚è∏' : '‚ñ∂';
            
            if (this.isPlaying) {
                this.animate();
            } else {
                cancelAnimationFrame(this.animationId);
            }
        });
    }

    animate() {
        this.currentAngle = (this.currentAngle + 1) % 360;
        this.updateAngleDisplay();
        this.draw();
        
        if (this.isPlaying) {
            this.animationId = requestAnimationFrame(() => this.animate());
        }
    }

    updateAngleDisplay() {
        const radians = (this.currentAngle * Math.PI / 180).toFixed(2);
        document.getElementById('angleDegrees').textContent = `${this.currentAngle}¬∞`;
        document.getElementById('angleRadians').textContent = `${radians} —Ä–∞–¥`;
    }

    draw() {
        const { width, height } = this.canvas;
        const centerX = width / 2;
        const centerY = height / 2;
        const radius = Math.min(width, height) / 2 - 60;

        // Clear canvas
        this.ctx.clearRect(0, 0, width, height);

        // Draw coordinate system
        this.ctx.strokeStyle = getComputedStyle(document.documentElement).getPropertyValue('--text-color');
        this.ctx.lineWidth = 2;
        
        // Draw axes
        this.ctx.beginPath();
        this.ctx.moveTo(0, centerY);
        this.ctx.lineTo(width, centerY);
        this.ctx.moveTo(centerX, 0);
        this.ctx.lineTo(centerX, height);
        this.ctx.stroke();

        // Draw unit circle
        this.ctx.beginPath();
        this.ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
        this.ctx.strokeStyle = getComputedStyle(document.documentElement).getPropertyValue('--primary-color');
        this.ctx.lineWidth = 3;
        this.ctx.stroke();

        // Draw current angle
        const angleRad = this.currentAngle * Math.PI / 180;
        const pointX = centerX + radius * Math.cos(angleRad);
        const pointY = centerY - radius * Math.sin(angleRad);
        
        // Draw angle line
        this.ctx.beginPath();
        this.ctx.moveTo(centerX, centerY);
        this.ctx.lineTo(pointX, pointY);
        this.ctx.strokeStyle = getComputedStyle(document.documentElement).getPropertyValue('--secondary-color');
        this.ctx.lineWidth = 4;
        this.ctx.stroke();
        
        // Draw moving point
        this.ctx.beginPath();
        this.ctx.arc(pointX, pointY, 8, 0, 2 * Math.PI);
        this.ctx.fillStyle = getComputedStyle(document.documentElement).getPropertyValue('--secondary-color');
        this.ctx.fill();

        // Draw angle arc
        this.ctx.beginPath();
        this.ctx.arc(centerX, centerY, radius * 0.2, 0, -angleRad, true);
        this.ctx.strokeStyle = getComputedStyle(document.documentElement).getPropertyValue('--accent-color');
        this.ctx.lineWidth = 3;
        this.ctx.stroke();
    }
}

// Angle Converter
class AngleConverter {
    constructor() {
        this.degreesInput = document.getElementById('degrees');
        this.radiansInput = document.getElementById('radians');
        this.setupListeners();
    }

    setupListeners() {
        this.degreesInput.addEventListener('input', () => {
            const degrees = parseFloat(this.degreesInput.value) || 0;
            const radians = (degrees * Math.PI / 180).toFixed(4);
            this.radiansInput.value = radians;
        });

        this.radiansInput.addEventListener('input', () => {
            const radians = parseFloat(this.radiansInput.value) || 0;
            const degrees = (radians * 180 / Math.PI).toFixed(2);
            this.degreesInput.value = degrees;
        });
    }
}

// Quiz Implementation
document.addEventListener("DOMContentLoaded", () => {
    const startButton = document.querySelector(".start-button");
    const nextButton = document.querySelector(".next-button");
    const continueButton = document.querySelector(".continue-button");
    const questionContainer = document.querySelector(".question-container");
    const optionsContainer = document.querySelector(".options-container");
    const questionText = document.querySelector(".question-text");
    const scoreValue = document.querySelector(".score-value");
    const questionCounter = document.querySelector(".question-counter");
    const progressFill = document.querySelector(".progress-fill");

    // Quiz Data
    const quizData = [
        {
            question: "–°–∫–æ–ª—å–∫–æ —Ä–∞–¥–∏–∞–Ω –≤ –ø–æ–ª–Ω–æ–º –∫—Ä—É–≥–µ?",
            options: ["œÄ —Ä–∞–¥–∏–∞–Ω", "2œÄ —Ä–∞–¥–∏–∞–Ω", "3œÄ —Ä–∞–¥–∏–∞–Ω", "4œÄ —Ä–∞–¥–∏–∞–Ω"],
            correct: 1,
            explanation: "–ü–æ–ª–Ω—ã–π –∫—Ä—É–≥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 2œÄ —Ä–∞–¥–∏–∞–Ω (360 –≥—Ä–∞–¥—É—Å–æ–≤)."
        },
        {
            question: "–ß–µ–º—É —Ä–∞–≤–µ–Ω 1 —Ä–∞–¥–∏–∞–Ω –≤ –≥—Ä–∞–¥—É—Å–∞—Ö?",
            options: ["45¬∞", "57.3¬∞", "60¬∞", "90¬∞"],
            correct: 1,
            explanation: "1 —Ä–∞–¥–∏–∞–Ω ‚âà 57.3¬∞ (180¬∞/œÄ)"
        },
        {
            question: "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ œÄ/2 —Ä–∞–¥–∏–∞–Ω?",
            options: ["45¬∞", "60¬∞", "90¬∞", "180¬∞"],
            correct: 2,
            explanation: "œÄ/2 —Ä–∞–¥–∏–∞–Ω = 90¬∞ (—á–µ—Ç–≤–µ—Ä—Ç—å –∫—Ä—É–≥–∞)"
        },
        {
            question: "–ö–∞–∫–æ–π —É–≥–æ–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç œÄ/6 —Ä–∞–¥–∏–∞–Ω?",
            options: ["20¬∞", "30¬∞", "45¬∞", "60¬∞"],
            correct: 1,
            explanation: "œÄ/6 —Ä–∞–¥–∏–∞–Ω = 30¬∞ (œÄ/6 √ó 180¬∞/œÄ = 30¬∞)"
        },
        {
            question: "–ß–µ–º—É —Ä–∞–≤–µ–Ω —É–≥–æ–ª œÄ/4 —Ä–∞–¥–∏–∞–Ω?",
            options: ["30¬∞", "45¬∞", "60¬∞", "90¬∞"],
            correct: 1,
            explanation: "œÄ/4 —Ä–∞–¥–∏–∞–Ω = 45¬∞ (–≤–æ—Å—å–º–∞—è —á–∞—Å—Ç—å –∫—Ä—É–≥–∞)"
        },
        {
            question: "–°–∫–æ–ª—å–∫–æ —Ä–∞–¥–∏–∞–Ω –≤ 180 –≥—Ä–∞–¥—É—Å–∞—Ö?",
            options: ["œÄ/2", "œÄ", "3œÄ/2", "2œÄ"],
            correct: 1,
            explanation: "180¬∞ = œÄ —Ä–∞–¥–∏–∞–Ω (–ø–æ–ª–æ–≤–∏–Ω–∞ –∫—Ä—É–≥–∞)"
        },
        {
            question: "–ö–∞–∫–æ–π —É–≥–æ–ª –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 270 –≥—Ä–∞–¥—É—Å–∞–º?",
            options: ["œÄ", "3œÄ/2", "2œÄ", "5œÄ/3"],
            correct: 1,
            explanation: "270¬∞ = 3œÄ/2 —Ä–∞–¥–∏–∞–Ω (—Ç—Ä–∏ —á–µ—Ç–≤–µ—Ä—Ç–∏ –∫—Ä—É–≥–∞)"
        },
        {
            question: "–ß–µ–º—É —Ä–∞–≤–µ–Ω —É–≥–æ–ª 2œÄ/3 —Ä–∞–¥–∏–∞–Ω –≤ –≥—Ä–∞–¥—É—Å–∞—Ö?",
            options: ["90¬∞", "120¬∞", "150¬∞", "180¬∞"],
            correct: 1,
            explanation: "2œÄ/3 —Ä–∞–¥–∏–∞–Ω = 120¬∞ (—Ç—Ä–µ—Ç—å –∫—Ä—É–≥–∞)"
        },
        {
            question: "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ 5œÄ/6 —Ä–∞–¥–∏–∞–Ω?",
            options: ["120¬∞", "150¬∞", "160¬∞", "175¬∞"],
            correct: 1,
            explanation: "5œÄ/6 —Ä–∞–¥–∏–∞–Ω = 150¬∞ (5/6 –æ—Ç 180¬∞)"
        },
        {
            question: "–ö–∞–∫–æ–π —É–≥–æ–ª –±–æ–ª—å—à–µ: œÄ/3 —Ä–∞–¥–∏–∞–Ω –∏–ª–∏ 50 –≥—Ä–∞–¥—É—Å–æ–≤?",
            options: ["œÄ/3 —Ä–∞–¥–∏–∞–Ω", "50 –≥—Ä–∞–¥—É—Å–æ–≤", "–û–Ω–∏ —Ä–∞–≤–Ω—ã", "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–≤–∞–¥—Ä–∞–Ω—Ç–∞"],
            correct: 0,
            explanation: "œÄ/3 —Ä–∞–¥–∏–∞–Ω = 60¬∞, —á—Ç–æ –±–æ–ª—å—à–µ —á–µ–º 50¬∞"
        },
        {
            question: "–°–∫–æ–ª—å–∫–æ —Ä–∞–¥–∏–∞–Ω –≤ 45 –≥—Ä–∞–¥—É—Å–∞—Ö?",
            options: ["œÄ/6", "œÄ/4", "œÄ/3", "œÄ/2"],
            correct: 1,
            explanation: "45¬∞ = œÄ/4 —Ä–∞–¥–∏–∞–Ω (–≤–æ—Å—å–º–∞—è —á–∞—Å—Ç—å –∫—Ä—É–≥–∞)"
        },
        {
            question: "–ö–∞–∫–æ–π —É–≥–æ–ª –º–µ–Ω—å—à–µ: 2œÄ/3 —Ä–∞–¥–∏–∞–Ω –∏–ª–∏ 100 –≥—Ä–∞–¥—É—Å–æ–≤?",
            options: ["2œÄ/3 —Ä–∞–¥–∏–∞–Ω", "100 –≥—Ä–∞–¥—É—Å–æ–≤", "–û–Ω–∏ —Ä–∞–≤–Ω—ã", "–ó–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"],
            correct: 1,
            explanation: "2œÄ/3 —Ä–∞–¥–∏–∞–Ω = 120¬∞, —á—Ç–æ –±–æ–ª—å—à–µ —á–µ–º 100¬∞"
        },
        {
            question: "–ß–µ–º—É —Ä–∞–≤–µ–Ω —É–≥–æ–ª 3œÄ/4 —Ä–∞–¥–∏–∞–Ω –≤ –≥—Ä–∞–¥—É—Å–∞—Ö?",
            options: ["115¬∞", "125¬∞", "135¬∞", "145¬∞"],
            correct: 2,
            explanation: "3œÄ/4 —Ä–∞–¥–∏–∞–Ω = 135¬∞ (—Ç—Ä–∏ –≤–æ—Å—å–º—ã—Ö –∫—Ä—É–≥–∞)"
        },
        {
            question: "–°–∫–æ–ª—å–∫–æ —Ä–∞–¥–∏–∞–Ω –≤ 240 –≥—Ä–∞–¥—É—Å–∞—Ö?",
            options: ["4œÄ/3", "3œÄ/2", "5œÄ/3", "7œÄ/6"],
            correct: 0,
            explanation: "240¬∞ = 4œÄ/3 —Ä–∞–¥–∏–∞–Ω (–¥–≤–µ —Ç—Ä–µ—Ç–∏ –∫—Ä—É–≥–∞)"
        },
        {
            question: "–ö–∞–∫–æ–π —É–≥–æ–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 5œÄ/4 —Ä–∞–¥–∏–∞–Ω?",
            options: ["205¬∞", "215¬∞", "225¬∞", "235¬∞"],
            correct: 2,
            explanation: "5œÄ/4 —Ä–∞–¥–∏–∞–Ω = 225¬∞ (–ø—è—Ç—å –≤–æ—Å—å–º—ã—Ö –∫—Ä—É–≥–∞)"
        },
        {
            question: "–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–¥—É—Å–æ–≤ –≤ œÄ/12 —Ä–∞–¥–∏–∞–Ω?",
            options: ["15¬∞", "20¬∞", "25¬∞", "30¬∞"],
            correct: 0,
            explanation: "œÄ/12 —Ä–∞–¥–∏–∞–Ω = 15¬∞ (–æ–¥–Ω–∞ –¥–≤–µ–Ω–∞–¥—Ü–∞—Ç–∞—è –∫—Ä—É–≥–∞)"
        },
        {
            question: "–ß–µ–º—É —Ä–∞–≤–µ–Ω —É–≥–æ–ª 7œÄ/6 —Ä–∞–¥–∏–∞–Ω –≤ –≥—Ä–∞–¥—É—Å–∞—Ö?",
            options: ["190¬∞", "200¬∞", "210¬∞", "220¬∞"],
            correct: 2,
            explanation: "7œÄ/6 —Ä–∞–¥–∏–∞–Ω = 210¬∞ (—Å–µ–º—å —à–µ—Å—Ç—ã—Ö –∫—Ä—É–≥–∞)"
        },
        {
            question: "–°–∫–æ–ª—å–∫–æ —Ä–∞–¥–∏–∞–Ω –≤ 300 –≥—Ä–∞–¥—É—Å–∞—Ö?",
            options: ["5œÄ/3", "7œÄ/4", "11œÄ/6", "23œÄ/12"],
            correct: 0,
            explanation: "300¬∞ = 5œÄ/3 —Ä–∞–¥–∏–∞–Ω (–ø—è—Ç—å —Ç—Ä–µ—Ç–µ–π –∫—Ä—É–≥–∞)"
        },
        {
            question: "–ö–∞–∫–æ–π —É–≥–æ–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç 11œÄ/6 —Ä–∞–¥–∏–∞–Ω?",
            options: ["315¬∞", "320¬∞", "330¬∞", "340¬∞"],
            correct: 2,
            explanation: "11œÄ/6 —Ä–∞–¥–∏–∞–Ω = 330¬∞ (–æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å —à–µ—Å—Ç—ã—Ö –∫—Ä—É–≥–∞)"
        },
        {
            question: "–í –∫–∞–∫–∏—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –¥–ª–∏–Ω–∞ –¥—É–≥–∏ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞?",
            options: ["–í —Ä–∞–¥–∏–∞–Ω–∞—Ö", "–í –≥—Ä–∞–¥—É—Å–∞—Ö", "–í –º–µ—Ç—Ä–∞—Ö", "–í —Ä–∞–¥–∏–∞–Ω–∞—Ö –∏ –≥—Ä–∞–¥—É—Å–∞—Ö"],
            correct: 0,
            explanation: "–î–ª–∏–Ω–∞ –¥—É–≥–∏ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ –µ–¥–∏–Ω–∏—á–Ω–æ–≥–æ —Ä–∞–¥–∏—É—Å–∞ —á–∏—Å–ª–µ–Ω–Ω–æ —Ä–∞–≤–Ω–∞ —É–≥–ª—É –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö"
        }
    ];

    let currentQuestionIndex = 0;
    let score = 0;
    let isAnswered = false;

    // Start Quiz
    startButton.addEventListener("click", () => {
        startButton.style.display = "none";
        continueButton.style.display = "none";
        nextButton.style.display = "none";
        showQuestion();
    });

    // Next Question
    nextButton.addEventListener("click", () => {
        if (!isAnswered) return;
        
        currentQuestionIndex++;
        if (currentQuestionIndex < quizData.length) {
            showQuestion();
        } else {
            showResults();
        }
        isAnswered = false;
        nextButton.style.display = "none";
    });

    // Show Question
    function showQuestion() {
        const currentQuestion = quizData[currentQuestionIndex];
        questionText.textContent = currentQuestion.question;
        optionsContainer.innerHTML = "";

        // Update progress
        const progress = ((currentQuestionIndex) / quizData.length) * 100;
        progressFill.style.width = `${progress}%`;

        // Create answer options
        currentQuestion.options.forEach((option, index) => {
            const button = document.createElement("button");
            button.classList.add("option-button");
            button.textContent = option;
            button.addEventListener("click", () => checkAnswer(index));
            optionsContainer.appendChild(button);
        });

        questionCounter.textContent = `–í–æ–ø—Ä–æ—Å ${currentQuestionIndex + 1} –∏–∑ ${quizData.length}`;
    }

    // Check Answer
    function checkAnswer(selectedIndex) {
        if (isAnswered) return;
        
        const currentQuestion = quizData[currentQuestionIndex];
        const buttons = optionsContainer.querySelectorAll(".option-button");
        
        buttons.forEach((button, index) => {
            button.disabled = true;
            if (index === currentQuestion.correct) {
                button.classList.add("correct");
            } else if (index === selectedIndex) {
                button.classList.add("wrong");
            }
        });

        if (selectedIndex === currentQuestion.correct) {
            score++;
            scoreValue.textContent = score;
        }

        isAnswered = true;
        nextButton.style.display = "block";
    }

    // Show Results
    function showResults() {
        questionText.textContent = `–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${score} –∏–∑ ${quizData.length}`;
        optionsContainer.innerHTML = "";
        nextButton.style.display = "none";
        continueButton.style.display = "block";
        progressFill.style.width = "100%";
    }

    // Continue/Restart Quiz
    continueButton.addEventListener("click", () => {
        currentQuestionIndex = 0;
        score = 0;
        isAnswered = false;
        scoreValue.textContent = "0";
        progressFill.style.width = "0%";
        continueButton.style.display = "none";
        showQuestion();
    });
});

// Initialize components
document.addEventListener('DOMContentLoaded', () => {
    new UnitCircle();
    new AngleConverter();
});
